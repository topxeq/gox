lenT = len(argsG)

if lenT < 2 {
	println("缺少参数")
	return
}

fileNameT = argsG[1]

tk = import("tk")

fcT = tk.LoadStringFromFile(fileNameT)

if tk.IsErrorString(fcT) {
	printfln("载入文件时发生错误：%v", tk.GetErrorString(fcT))
	return
}

var gui = import("gui")

text1 = fcT


func onButtonRunClick() {
	rs = runScript(text1)
	// rs = systemCmd("gox", fileNameT)

	rs1 = gui.Msgbox("运行结果", tk.Spr("%v", rs))

	tk.Plv(rs1)
}

func onButtonSaveClick() {
	rs = false
	if tk.IfFileExists(fileNameT) {
		rs = gui.GetConfirm("请确认", "文件已存在，是否覆盖?")
	}

	if rs == true {
		rs1 = tk.SaveStringToFile(text1, fileNameT)

		if rs1 != "" {
			gui.Msgbox("错误", tk.Spr("保存失败：%v", rs))
			return
		}

		gui.Msgbox("信息", tk.Spr("文件已保存到：%v", fileNameT))
	}

}

func onButtonSaveAsClick() {

	fileNameNewT = gui.SelectSaveFile("请选择另存为的文件……", "所有文件", "*")

	if tk.IsErrorString(fileNameNewT) {
		if tk.EndsWith(fileNameNewT, "Cancelled") {
			gui.Msgbox("信息", tk.Spr("选择文件已取消"))
			return
		}

		gui.Msgbox("错误", tk.Spr("选择文件失败：%v", tk.GetErrorString(fileNameNewT)))
		return
	}

	fileNameT = fileNameNewT

	// mainWindow.title = "编辑器 - " + fileNameT

	rs = false
	if tk.IfFileExists(fileNameT) {
		rs = gui.GetConfirm("请再次确认", "文件已存在，是否覆盖?")
	}

	if rs == true {
		rs1 = tk.SaveStringToFile(text1, fileNameT)

		if rs1 != "" {
			gui.Msgbox("错误", tk.Spr("保存失败：%v", rs))
			return
		}

		gui.Msgbox("信息", tk.Spr("文件已保存到：%v", fileNameT))
	}

}

func onButtonEncryptClick() {
	gui.OpenPopup("PopupEncrypt001")

}

func onButton1Click() {
	rs = eval(text1)
	text1 = toString(rs)
}

func onButton2Click() {
	gui.Msgbox("abc", "ads")
}

func onButtonCloseClick() {
	exit()
}

func onClosePopupEncrypt001() {
	gui.CloseCurrentPopup()
}

fileNameLabel = nil

func loop() {

	layoutT = make(gui.Layout)

	// fileNameLabel = 

	layoutT += gui.Label(fileNameT)
	layoutT += gui.InputTextMultiline("InputTextMultiline001", &text1, -1, -30, 0, nil, nil)
	layoutT += gui.Line(gui.Button("运行", onButtonRunClick), gui.Button("保存", onButtonSaveClick), gui.Button("另存", onButtonSaveAsClick), gui.Button("加密", onButtonEncryptClick), gui.Button("解密", onButton1Click), gui.Button("关闭", onButtonCloseClick))

	layoutT += gui.PopupModal("PopupEncrypt001", []gui.Widget{
		gui.Label("Confirm to close me?"),
		gui.Line(gui.Button("Yes", onClosePopupEncrypt001), gui.Button("No", nil)),
	})


	layoutT += gui.PrepareMsgbox()

	gui.SingleWindow("编辑器 - "+fileNameT, layoutT)
}


setVar("Font", "c:/Windows/Fonts/simsun.ttc")
setVar("FontRange", "COMMON")
setVar("FontSize", "17")

mainWindow = gui.NewMasterWindow("编辑器", 640, 480, 0, gui.LoadFont)

mainWindow.Main(loop)
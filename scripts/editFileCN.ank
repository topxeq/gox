// anko

tk = import("tk")

lenT = len(argsG)

editFileNameG = ""
editFileCleanFlagG = ""
editSecureCodeG = ""

fcT = ""

if lenT < 2 {
	editFileNameG = ""
	editFileCleanFlagG = "*"
} else {
	editFileNameG = argsG[1]
	fcT = tk.LoadStringFromFile(editFileNameG)

	if tk.IsErrorString(fcT) {
		gui.SimpleError("错误提示", "载入文件时发生错误：%v", tk.GetErrorString(fcT))
		return
	}

	editFileCleanFlagG = ""

}


var gui = import("gui")

// hold the text in main edit control
text1 = fcT

func onEditChange() {
	editFileCleanFlagG = "*"
}

func onButtonLoad() {
	if editFileCleanFlagG != "" {
		rs = gui.GetConfirm("请确认", "文件已被修改，确认要打开另一个文件吗？")

		if rs == false {
			return
		}
	}

	fileNameNewT = gui.SelectFile("请选择要打开的文件", "所有文件", "*")

	if tk.IsErrorString(fileNameNewT) {
		if tk.EndsWith(fileNameNewT, "Cancelled") {
			gui.MessageBox("信息", tk.Spr("操作被用户取消"))
			return
		}

		gui.MessageBox("错误提示", tk.Spr("选择文件失败：%v", tk.GetErrorString(fileNameNewT)))
		return
	}

	fcT = tk.LoadStringFromFile(fileNameNewT)

	if tk.IsErrorString(fcT) {
		gui.MessageBox("错误提示", tk.Spr("载入文件内容失败：%v", tk.GetErrorString(fileNameNewT)))
		return
	}

	editFileNameG = fileNameNewT
	
	text1 = fcT

	editFileCleanFlagG = ""

}

func onButtonRunClick() {
	rs = runScript(text1, "new")
	// rs = systemCmd("gox", fileNameT)

	gui.MessageBox("运行结果", tk.Spr("%v", rs))
}

func editorSaveAs() {
	fileNameNewT = gui.SelectSaveFile("请选择要保存的文件", "所有文件", "*")

	if tk.IsErrorString(fileNameNewT) {
		if tk.EndsWith(fileNameNewT, "Cancelled") {
			gui.MessageBox("信息", tk.Spr("操作被用户取消"))
			return
		}

		gui.MessageBox("错误提示", tk.Spr("选择文件失败：%v", tk.GetErrorString(fileNameNewT)))
		return
	}

	editFileNameG = fileNameNewT

	rs1 = tk.SaveStringToFile(text1, editFileNameG)

	if rs1 != "" {
		gui.MessageBox("错误提示", tk.Spr("保存文件失败：%v", rs))
		return
	}

	gui.MessageBox("信息", tk.Spr("文件已被保存至：%v", editFileNameG))

	editFileCleanFlagG = ""

}

func editorSave() {
	if editFileNameG == "" {
		editorSaveAs()

		return
	}

	rs = false

	if tk.IfFileExists(editFileNameG) {
		rs = gui.GetConfirm("请确认", "文件已存在，是否要覆盖？")
	}

	if rs == true {
		rs1 = tk.SaveStringToFile(text1, editFileNameG)

		if rs1 != "" {
			gui.MessageBox("错误提示", tk.Spr("保存文件失败：%v", rs))
			return
		}

		gui.MessageBox("信息", tk.Spr("文件已被保存至：%v", editFileNameG))

		editFileCleanFlagG = ""
	}

}

func editEncrypt() {
	gui.CloseCurrentPopup()

	sourceT = text1

	encStrT = tk.EncryptStringByTXDEF(sourceT, editSecureCodeG)

	if tk.IsErrorString(encStrT) {
		gui.SimpleError("错误提示", tk.Spr("加密失败：%v", tk.GetErrorString(encStrT)))
		return
	}

	text1 = "//TXDEF#" + encStrT
	editFileCleanFlagG = "*"

	editSecureCodeG = ""
}

func editEncryptClick() {
	gui.OpenPopup("请输入密码##EncryptInputSecureCode")
}

func editDecrypt() {
	gui.CloseCurrentPopup()

	sourceT = tk.Trim(text1)

	encStrT = tk.DecryptStringByTXDEF(sourceT, editSecureCodeG)

	if tk.IsErrorString(encStrT) {
		gui.SimpleError("错误提示", tk.Spr("解密失败：%v", tk.GetErrorString(encStrT)))
		return
	}

	text1 = encStrT
	editFileCleanFlagG = "*"
	editSecureCodeG = ""

}

func editDecryptClick() {
	gui.OpenPopup("请输入密码##DecryptInputSecureCode")
}


func onButtonCloseClick() {
	exit()
}

func loop() {

	layoutT = make(gui.Layout)

	layoutT += gui.Label(editFileNameG + editFileCleanFlagG)
	layoutT += gui.InputTextMultiline("InputTextMultiline001", &text1, -1, -30, 0, nil, onEditChange)
	layoutT += gui.Line(gui.Button("打开", onButtonLoad), gui.Button("保存", editorSave), gui.Button("另存为", editorSaveAs), gui.Button("加密", editEncryptClick), gui.Button("解密", editDecryptClick), gui.Button("运行", onButtonRunClick), gui.Button("关闭", onButtonCloseClick))

	layoutT += gui.PopupModal("请输入密码##EncryptInputSecureCode", []gui.Widget{gui.Line(gui.Label("密码"), gui.InputTextV("", 40, &editSecureCodeG, gui.InputTextFlagsPassword, nil, nil)),
		gui.Line(gui.Button("确定", editEncrypt), gui.Button("取消", func() { gui.CloseCurrentPopup() })),
	})

	layoutT += gui.PopupModal("请输入密码##DecryptInputSecureCode", []gui.Widget{
		gui.Line(gui.Label("密码"),
			gui.InputTextV("", 40, &editSecureCodeG, gui.InputTextFlagsPassword, nil, nil)),
		gui.Line(gui.Button("确定", editDecrypt),
			gui.Button("取消", func() { gui.CloseCurrentPopup() })),
	})


	// add this to the layout if you would use gui.MessageBox function later
	layoutT += gui.PrepareMessageBox()

	gui.SingleWindow("Gox编辑器", layoutT)
}

osNameT = tk.GetOSName()

if tk.Contains(osNameT, "darwin") {
	setVar("Font", "/Library/Fonts/Microsoft/SimHei.ttf")
} else {
	setVar("Font", "c:/Windows/Fonts/simsun.ttc")
}

setVar("FontRange", "COMMON")
setVar("FontSize", "15")

mainWindow = gui.NewMasterWindow("Gox编辑器", 800, 600, 0, gui.LoadFont)

gui.LoopWindow(mainWindow, loop)
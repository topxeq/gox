sync = import("sync")
tk = import("tk")

var valueG = 0
var groupG = make(sync.WaitGroup)

var mutexG = make(sync.Mutex)

func addRoutine(countA) {

	for i = 0; i < countA; i++ {
		mutexG.Lock()
		valueG = valueG + 2
		mutexG.Unlock()
	}

	groupG.Done()

}

func minusRoutine(countA) {

	for i = 0; i < countA; i++ {
		mutexG.Lock()
		valueG = valueG - 2
		mutexG.Unlock()
	}

	groupG.Done()
}

times = 5000

groupG.Add(2)

go addRoutine(times)
go minusRoutine(times - 2)

groupG.Wait()

printfln("valueG: %v", valueG)

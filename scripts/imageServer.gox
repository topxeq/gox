portG = ":8401"

dirT = getSwitch(argsG, "-dir=", `d:\downtemp`)

pl("generate list in %v", dirT)
fileListG := getFileList(dirT, "-recursive", "-pattern=*.[jpg][pni][gf]")

pl("len: %v", len(fileListG))
// return

muxG = http.NewServeMux()

jpgOptionsG = new(image_jpeg.Options)
jpgOptionsG.Quality = 90

currentImageIndexG = -1

muxG.HandleFunc("/getimagecontent/", fn(res, req) {
	// pl("req: %#v", req)

	// if !isNil(req) {
	// 	req.ParseForm()
	// }

	reqT = req.RequestURI[len("/getimagecontent/"):]

	// pl("reqT: %v", reqT)

	// return

	res.WriteHeader(200) // HTTP 200

	if len(fileListG) < 1 {
		writeResp(res, "no file")
		return
	} else {
		idxt := strToInt(reqT, -1)
		if reqT == "current" {
			idxt = currentImageIndexG
		}

		if (idxt < 0) || (idxt >= len(fileListG)) {
			res.Write([]byte("invalid image index"))
			return
		}

		if !ifFileExists(fileListG[idxt].Abs) {
			res.Write([]byte("file not exists"))
			return
		}

		imgT := imagetk.ITKX.GetImageFileContentAndThumb(fileListG[idxt].Abs, 640, 960, fileListG[idxt].Ext)
		if imgT == nil {
			res.Write([]byte("loading image failed"))
			return
		}

		res.Header().Set("Content-Type", "image/jpeg")
		err := image_jpeg.Encode(res, imgT, jpgOptionsG)
		// if err != nil {
		// 	res.WriteHeader(500)
		// } else {
		// 	res.WriteHeader(200)
		// }
	}

})

muxG.HandleFunc("/getimage", fn(res, req) {
	// pl("req: %#v", req)
	// writeResp(res, spr("host: %#v, path: %#v\n", req.Host, req.URL))

	res.WriteHeader(200) // HTTP 200

	if len(fileListG) < 1 {
		writeResp(res, generateJSONResponse("fail", "no file", req))
		return
	}

	cnt := getRandomInt(len(fileListG))
	writeResp(res, generateJSONResponse("success", spr("http://%v/getimagecontent/%v", req.Host, cnt), req))
})

muxG.HandleFunc("/deleteimage/", fn(res, req) {
	reqT = req.RequestURI[len("/deleteimage/"):]

	// pl("reqT: %v", reqT)

	if len(fileListG) < 1 {
		writeResp(res, "no file")
		return
	} else {
		idxt := strToInt(reqT, -1)

		if (idxt < 0) || (idxt >= len(fileListG)) {
			res.Write([]byte("invalid image index"))
			return
		}

		if !ifFileExists(fileListG[idxt].Abs) {
			res.Write([]byte("file not exists"))
			return
		}

		rs := os.Remove(fileListG[idxt].Abs)

		if rs != nil {
			res.Write([]byte("delete image failed: " + rs.Error()))
			return
		}

		res.Write([]byte(spr("successfully deleted the image: %v", fileListG[idxt].Abs)))
	}

})

muxG.HandleFunc("/showimageinfo/", fn(res, req) {
	reqT = req.RequestURI[len("/showimageinfo/"):]

	// pl("reqT: %v", reqT)

	if len(fileListG) < 1 {
		writeResp(res, "no file")
		return
	} else {
		idxt := strToInt(reqT, -1)

		if (idxt < 0) || (idxt >= len(fileListG)) {
			res.Write([]byte("invalid image index"))
			return
		}

		if !ifFileExists(fileListG[idxt].Abs) {
			res.Write([]byte("file not exists"))
			return
		}

		res.Write([]byte(fileListG[idxt].Path))
	}

})


imagePageTemplateG = `
<html>
	<head>
		<meta charset="utf-8" />
		<meta http-equiv="content-type" content="text/html;" charset="UTF-8" />
		<meta name='viewport' content='width=device-width; initial-scale=1.0; maximum-scale=4.0; user-scalable=1;' /> 
		<script>
			function goImage() {
				location.href='/index/'+document.getElementById("num").value;
			}
		</script>
	</head>
	<body>
		<div>
			<a href="/random"><img src="TX_imageUrl_XT" width="100%"></img></a>
		</div>
		<div>
			<span>TX_imageIndex_XT/TX_imageCount_XT:</span> <span>TX_imageFileName_XT</span>
		</div>
		<div>
			<input type="button" name="random" value="Random" onclick="location.href='/random'" />
			<input type="button" name="previous" value="Previous" onclick="location.href='/previous'" />
			<input type="button" name="next" value="Next" onclick="location.href='/next'" />
			<input type="button" name="delete" value="Trash" onclick="location.href='/deleteimage/TX_imageIndexReal_XT'" />
		</div>
		<div style="margin-top: 3px;">
			<input id=num value="TX_imageIndex_XT" />
			<input type="button" name="go" value="Go" onclick="javascript:goImage();" />
		</div>
		<div style="height: 2.0em;"></div>
	</body>
</html>

`

func writeImage(resA) {
	if currentImageIndexG < 0 {
		return
	}

	// pl("currentImageIndexG: %v", currentImageIndexG)

	tmpStrL := strReplace(imagePageTemplateG, "TX_imageUrl_XT", "/getimagecontent/current")
	tmpStrL = strReplace(tmpStrL, "TX_imageIndex_XT", spr("%v", currentImageIndexG+1))
	tmpStrL = strReplace(tmpStrL, "TX_imageIndexReal_XT", spr("%v", currentImageIndexG))
	tmpStrL = strReplace(tmpStrL, "TX_imageCount_XT", spr("%v", len(fileListG)))
	listL = filepath.Split(fileListG[currentImageIndexG].Abs)
	tmpStrL = strReplace(tmpStrL, "TX_imageFileName_XT", joinPath(filepath.Base(listL[0]), listL[1]))

	writeResp(resA, tmpStrL)
}

func showImage(resA, indexA) {
	if indexA == undefined || indexA < 0 || indexA >= len(fileListG) {
		currentImageIndexG = getRandomInt(len(fileListG))
	} else {
		currentImageIndexG = indexA
	}

	writeImage(resA)

}

muxG.HandleFunc("/", fn(w, req) {
	// writeResp(w, spr("host: %#v, path: %#v\n", req.Host, req.URL))
	w.Header().Set("Content-Type", "text/html;charset=utf-8")

	reqL = trim(req.RequestURI[len("/"):])
	// pl("reqL: %v", reqL)

	if reqL == "previous" {
		currentImageIndexG--
		if currentImageIndexG < 0 {
			currentImageIndexG = 0
		}

		writeImage(w)

		return
	} elif reqL == "next" {
		currentImageIndexG++
		if currentImageIndexG >= len(fileListG) {
			currentImageIndexG = len(fileListG) - 1
		}

		writeImage(w)

		return
	} elif reqL == "random" {
		showImage(w, -1)
	} elif startsWith(reqL, "index/") {
		idxL = strToInt(reqL[len("index/"):], -1)

		if idxL < 1 {
			idxL = 1
		} elif idxL > len(fileListG) {
			idxL = len(fileListG)
		}

		showImage(w, idxL-1)
	}

})

func startService() {
	errL = http.ListenAndServe(portG, muxG)
	if errL != nil {
		pl("failed to start server on %v: %v", portG, errL)
		exit()
	}
}

pl("try start service on %v", portG)

startService()



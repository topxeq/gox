fmt = import ("fmt")
tk = import("tk")
time = import("time")
rand =	import("math/rand")

func calPi(pointCount) {
	inCircleCount = 0

	r = tk.NewRandomGenerator()

	for i = 0; i < pointCount; i++ {
		x = r.Float64()
		y = r.Float64()

		if x*x+y*y < 1 {
			inCircleCount++
		}
	}

	Pi = (4.0 * inCircleCount) / pointCount

	return Pi
}

func fibonacci(c) {
	if c < 2 {
		return c
	}

	return fibonacci(c-2) + fibonacci(c-1)
}

func fibonacciFlat(c) {
	if c < 2 {
		return c
	}

	var fibo = 1
	var fiboPrev = 1
	for i = 2; i < c; i++ {
		temp = fibo
		fibo += fiboPrev
		fiboPrev = temp
	}

	return fibo
}

func main() {
	tk.Randomize() // 初始化随机数

	countT = 10000000

	println("\nGox Test 2")
	
	startTime = time.Now()

	println("Count:", countT)

	result = calPi(countT)

	endTime = time.Now()

	fmt.Printf("Result: %v\n", result)

	fmt.Printf("Duration: %v s\n", endTime.Sub(startTime))

	println("\nJavaScript Test 2")
	
	startTime = time.Now()

	jsStrT = `
	function calPi(pointCount) {
		var inCircleCount = 0
	
		for (var i = 0; i < pointCount; i++) {
			var x = Math.random()
			var y = Math.random()
	
			if (x*x+y*y < 1) {
				inCircleCount++
			}
		}
	
		var Pi = (4.0 * inCircleCount) / pointCount
	
		return Pi
	}
	
	
	var countStrT = getVar("Count");
	
	var countT = 1000;
	
	if (!countStrT.startsWith("TXERROR:")) {
		countT = parseInt(countStrT);
	}
	
	if (countT == NaN) {
		countT = 1000;
	}
	
	println("Count:", countT);
	
	resultG = calPi(countT)
		
	`

	setVar("Count", toString(countT))

	result = runScript(jsStrT, "js")

	endTime = time.Now()

	fmt.Printf("Result: %v\n", result)

	fmt.Printf("Duration: %v s\n", endTime.Sub(startTime))

	println("\nTengo Test 2")
	
	startTime = time.Now()

	tgStrT = `
	timelib := import("times")
	fmt := import("fmt")
	rand := import("rand")
	text := import("text")


	calPi := func(pointCount) {
		inCircleCount := 0
		
		rand.seed(timelib.time_unix(timelib.now()))

		for i := 0; i < pointCount; i++ {
			x := rand.float()
			y := rand.float()

			if x*x+y*y < 1 {
				inCircleCount++
			}
		}

		Pi := (4.0 * inCircleCount) / pointCount

		return Pi
	}

	countStrT := getVar("Count");

	countT := 1000;

	if !text.has_prefix(countStrT, "TXERROR:") {
		countT = int(countStrT)
	}

	if (countT == undefined) {
		countT = 1000
	}

	fmt.printf("Count: %v\n", countT);

	resultG := calPi(countT)
		
	`

	setVar("Count", toString(countT))

	result = runScript(tgStrT, "tg")

	endTime = time.Now()

	fmt.Printf("Result: %v\n", result)

	fmt.Printf("Duration: %v s\n", endTime.Sub(startTime))

	// fmt.Printf("Test 1\n")

	// startTime = time.Now()

	// result = 0.0

	// for i = 0; i < 10000000; i ++ {
	// 	result += i * i
	// }

	// endTime = time.Now()

	// fmt.Printf("Result: %v\n", result)

	// fmt.Printf("Duration: %v\n", endTime.Sub(startTime))

	// fmt.Printf("Test 2\n")

	// startTime = time.Now()

	// resultInt = fibonacciFlat(100000000)

	// endTime = time.Now()

	// fmt.Printf("Result: %v\n", resultInt)

	// fmt.Printf("Duration: %v\n", endTime.Sub(startTime))

	// fmt.Printf("Test 2r\n")

	// startTime = time.Now()

	// resultInt = fibonacci(20)

	// endTime = time.Now()

	// fmt.Printf("Result: %v\n", resultInt)

	// fmt.Printf("Duration: %v\n", endTime.Sub(startTime))

	// fmt.Printf("Test 3\n")

	// startTime = time.Now()

	// result = 0.0

	// for i = 0; i < 1000000; i ++ {
	// 	result += rand.Float64()
	// }

	// endTime = time.Now()

	// fmt.Printf("Result: %v\n", result)

	// fmt.Printf("Duration: %v\n s", endTime.Sub(startTime))

	// fmt.Printf("Test 4\n")

	// startTime = time.Now()

	// result = calPi(1000000)

	// endTime = time.Now()

	// fmt.Printf("Result: %v\n", result)

	// fmt.Printf("Duration: %v s\n", endTime.Sub(startTime))

}

main()


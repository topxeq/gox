sciter = github_scitersdk_gosciter
window = github_scitersdk_gosciter_window

htmlT := `
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
	<title>事件处理</title>
	<script type="text/tiscript">
		function colorize() 
		{
			const apply = Selection.applyMark; // shortcut
				const isEditor = this.tag == "plaintext";
			
			// forward declarations:
			var doStyle;
			var doScript;

			// markup colorizer  
			function doMarkup(tz) 
			{
					var bnTagStart = null;
					var tagScript = false;
					var tagScriptType = false;
					var tagStyle = false;
					var textElement;
				
				while(var tt = tz.token()) {
				if( isEditor && tz.element != textElement )       
				{
					textElement = tz.element;
					textElement.attributes["type"] = "markup";
				}
				//stdout.println(tt,tz.attr,tz.value);
				switch(tt) {
					case #TAG-START: {    
						bnTagStart = tz.tokenStart; 
						const tag = tz.tag;
						tagScript = tag == "script";
						tagStyle  = tag == "style";
					} break;
					case #TAG-HEAD-END: {
						apply(bnTagStart,tz.tokenEnd,"tag"); 
						if( tagScript ) { tz.push(#source,"</sc"+"ript>"); doScript(tz, tagScriptType, true); }
						else if( tagStyle ) { tz.push(#source,"</style>"); doStyle(tz, true); }
					} break;
					case #TAG-END:      apply(tz.tokenStart,tz.tokenEnd,"tag"); break;  
					case #TAG-ATTR:     if( tagScript && tz.attr == "type") tagScriptType = tz.value; 
										if( tz.attr == "id" ) apply(tz.tokenStart,tz.tokenEnd,"tag-id"); 
										break;
				}
				}
			}
			
			// script colorizer
			doScript = function(tz, typ, embedded = false) 
			{
				const KEYWORDS = 
				{
				"type"    :true, "function":true, "var"       :true,"if"       :true,
				"else"    :true, "while"   :true, "return"    :true,"for"      :true,
				"break"   :true, "continue":true, "do"        :true,"switch"   :true,
				"case"    :true, "default" :true, "null"      :true,"super"    :true,
				"new"     :true, "try"     :true, "catch"     :true,"finally"  :true,
				"throw"   :true, "typeof"  :true, "instanceof":true,"in"       :true,
				"property":true, "const"   :true, "get"       :true,"set"      :true,
				"include" :true, "like"    :true, "class"     :true,"namespace":true,
				"this"    :true, "assert"  :true, "delete"    :true,"otherwise":true,
				"with"    :true, "__FILE__":true, "__LINE__"  :true,"__TRACE__":true,
				"debug"   :true, "await"   :true 
				};
				
				const LITERALS = { "true": true, "false": true, "null": true, "undefined": true };
				
				var firstElement;
				var lastElement;
			
				while:loop(var tt = tz.token()) {
				var el = tz.element;
				if( !firstElement ) firstElement = el;
				lastElement = el;
				switch(tt) 
				{
					case #NUMBER:       apply(tz.tokenStart,tz.tokenEnd,"number"); break; 
					case #NUMBER-UNIT:  apply(tz.tokenStart,tz.tokenEnd,"number-unit"); break; 
					case #STRING:       apply(tz.tokenStart,tz.tokenEnd,"string"); break;
					case #NAME:         
					{
					var val = tz.value;
					if( val[0] == '#' )
						apply(tz.tokenStart,tz.tokenEnd, "symbol"); 
					else if(KEYWORDS[val]) 
						apply(tz.tokenStart,tz.tokenEnd, "keyword"); 
					else if(LITERALS[val]) 
						apply(tz.tokenStart,tz.tokenEnd, "literal"); 
					break;
					}
					case #COMMENT:      apply(tz.tokenStart,tz.tokenEnd,"comment"); break;
					case #END-OF-ISLAND:  
					// got </scr ipt>
					tz.pop(); //pop tokenizer layer
					break loop;
				}
				}
				if(isEditor && embedded) {
				for( var el = firstElement; el; el = el.next ) {
					el.attributes["type"] = "script";
					if( el == lastElement )
					break;
				}
				}
			};
			
			doStyle = function(tz, embedded = false) 
			{
				const KEYWORDS = 
				{
				"rgb":true, "rgba":true, "url":true, 
				"@import":true, "@media":true, "@set":true, "@const":true
				};
				
				const LITERALS = { "inherit": true };
				
				var firstElement;
				var lastElement;
				
				while:loop(var tt = tz.token()) {
				var el = tz.element;
				if( !firstElement ) firstElement = el;
				lastElement = el;
				switch(tt) 
				{
					case #NUMBER:       apply(tz.tokenStart,tz.tokenEnd,"number"); break; 
					case #NUMBER-UNIT:  apply(tz.tokenStart,tz.tokenEnd,"number-unit"); break; 
					case #STRING:       apply(tz.tokenStart,tz.tokenEnd,"string"); break;
					case #NAME:         
					{
					var val = tz.value;
					if( val[0] == '#' )
						apply(tz.tokenStart,tz.tokenEnd, "symbol"); 
					else if(KEYWORDS[val]) 
						apply(tz.tokenStart,tz.tokenEnd, "keyword"); 
					else if(LITERALS[val]) 
						apply(tz.tokenStart,tz.tokenEnd, "literal"); 
					break;
					}
					case #COMMENT:      apply(tz.tokenStart,tz.tokenEnd,"comment"); break;
					case #END-OF-ISLAND:  
					// got </sc ript>
					tz.pop(); //pop tokenizer layer
					break loop;
				}
				}
				if(isEditor && embedded) {
				for( var el = firstElement; el; el = el.next ) {
					el.attributes["type"] = "style";
					if( el == lastElement )
					break;
				}
				}
			};
			
			var me = this;
			
			function doIt() { 
			
				var typ = me.attributes["type"];

				stdout.println("typ:", typ);
				
				var syntaxKind = typ like "*html" || typ like "*xml" ? #markup : #source;
				var syntax = typ like "*css"? #style : #script;
				
				var tz = new Tokenizer( me, syntaxKind );
			
				if( syntaxKind == #markup )
				doMarkup(tz);
				else if( syntax == #style )
				doStyle(tz);
				else 
				doScript(tz,typ);
			}
			
			doIt();
			
			// redefine value property
			this[#value] = property(v) {
				get { return this.state.value; }
				set { this.state.value = v; doIt(); }
			};
			
			this.load = function(text,sourceType) 
			{
				this.attributes["type"] = sourceType;
				if( !isEditor )
				text = text.replace(/\r\n/g,"\n"); 
				this.state.value = text; 
				doIt();
			};
			
			this.sourceType = property(v) {
				get { return this.attributes["type"]; }
				set { this.attributes["type"] = v; doIt(); }
			};
			if (isEditor)
					this.on("change", function() {
						this.timer(40ms,doIt);
					});
			

		}
	</script>
	<style>

		@set colorizer < std-plaintext 
		{
			:root { aspect: colorize; }
			
			text { white-space:pre; }
			/*markup*/  
			text::mark(tag) { color: olive; } /*background-color: #f0f0fa;*/
			text::mark(tag-id) { color: red; } /*background-color: #f0f0fa;*/

			/*source*/  
			text::mark(number) { color: brown; }
			text::mark(number-unit) { color: brown; }
			text::mark(string) { color: teal; }
			text::mark(keyword) { color: blue; }
			text::mark(symbol) { color: brown; }
			text::mark(literal) { color: brown; }
			text::mark(comment) { color: green; }
			
			text[type=script] {  background-color: #FFFAF0; }
			text[type=markup] {  background-color: #FFF;  }
			text[type=style]  {  background-color: #FAFFF0; }
		}

		plaintext[type] {
			style-set: colorizer;
		}

		@set element-colorizer 
		{
			:root { 
				aspect: colorize; 
				background-color: #fafaff;
					padding:4dip;
					border:1dip dashed #bbb;
				}
			
			/*markup*/  
			:root::mark(tag) { color: olive; } 
			:root::mark(tag-id) { color: red; }

			/*source*/  
			:root::mark(number) { color: brown; }
			:root::mark(number-unit) { color: brown; }
			:root::mark(string) { color: teal; }
			:root::mark(keyword) { color: blue; }
			:root::mark(symbol) { color: brown; }
			:root::mark(literal) { color: brown; }
			:root::mark(comment) { color: green; }
			}

			pre[type] {
			style-set: element-colorizer;
		}

	</style>
	<script type="text/tiscript">
		if( view.connectToInspector ) {
			view.connectToInspector(rootElement, inspectorIpAddress);
		}

		//stdout.println("__FOLDER__:", __FOLDER__);
		//stdout.println("__FILE__:", __FILE__);

		function selectFileJS() {
			//var fn = view.selectFile(#open, "Gotx Files (*.gt,*.go)|*.gt;*.go|All Files (*.*)|*.*" , "gotx" );
			var fn = view.selectFile(#open);
			stdout.println("fn", fn);
			stdout.println("loadStringFromFile", view.loadFileFromFile);
            // view.msgbox(#alert, view.loadFileFromString("56"));

			var rs = view.loadFileFromFile(URL.toPath(fn));

			stdout.println("rs", rs);

			$(plaintext).attributes["type"] = "text/script";

			$(plaintext).value = rs;

			// return fn;
		}

		function self.ready() {
			// var r = 12.6;
			// stdout.printf( "%f" , r );
			// var x=123;
			// debug log(x={x}, x:{x}, x({x}), x[{x}]);
			//var a = self.url("colorizer.tis");
			//debug log(a={a});

			$(plaintext).value = "<html>\n<body>\n<span>abc</span>\n</body></html>";

			$(#btn2).onClick = selectFileJS;

		}
	</script>
</head>
<body>
	<button id="btn1">Load...</button>
	<button id="btn2">点我2</button>
	<button id="btn3">点我3</button>
	<button id="btn4">点我4</button>
	<script type="text/tiscript">
		// var root = view.root;
 
	</script>

	<plaintext#source type="text/html"></plaintext>
	<pre type />
</body>
</html>
`

screenW, screenH := sysspec.GetScreenResolution()

runtime.LockOSThread()

w, err := window.New(sciter.DefaultWindowCreateFlag, sciter.NewRect((screenH-600)/2, (screenW-800)/2, 800, 600))
if err != nil {
	log.Fatal(err)
}

w.SetOption(sciter.SCITER_SET_SCRIPT_RUNTIME_FEATURES, sciter.ALLOW_FILE_IO | sciter.ALLOW_SOCKET_IO | sciter.ALLOW_EVAL | sciter.ALLOW_SYSINFO)

w.LoadHtml(htmlT, "")

w.SetTitle("事件处理")

root, _ := w.GetRootElement()

btn1, _ := root.SelectById("btn1")

btn1.OnClick(func() {
	fmt.Println("btn1被点击了")

	btn1.SetStyle("color", "#FF0000")

	fmt.Println(btn1.Html(true))

	// li.SetHtml("<a href='http://www.baidu.com'>baidu.com</a>", sciter.SIH_REPLACE_CONTENT)
	// //在最后面追加内容
	// li.SetHtml("哈哈", sciter.SIH_APPEND_AFTER_LAST)
	//设置元素属性
	// li.SetAttr("test", "test")
	// li2, _ := root.SelectFirst("ul#list>li:nth-child(2)")
	//设置文本
	btn1.SetHtml("我改我改", sciter.SIH_REPLACE_CONTENT)
	// btn1.SetAttr("value", "abcdefg")

})

w.DefineFunction("loadFileFromFile", func(args) {
	tk.Pl("file: %#v", args[0].String())
	rs := tk.LoadStringFromFile(args[0].String())
	return sciter.NewValue(rs)
})


w.Show()

w.Run()

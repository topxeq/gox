// b is a string type pointer newly created
b = new(string)

printfln("b: %#v", b)

// use built-in function setValue to assign values refered by pointers
// This kind of assignment operation, *b = "abb", is not allowed
setValue(b, "abb")

// but * could be used as dereference operator
c = *b

pc1 = ^c

println("c:", c, "pc1:", pc1)

setValue(pc1, "123")

println("c:", c, "pc1:", pc1)

pl("b: %#v, *b: %#v", b, *b)

// built-in function getValue is also available to get value from pointer
d = getValue(b)

println("d:", d)

e = false

println("e:", e)

// use ^ to get reference/pointer instead of & in Gox
f = ^e

printfln("f: %#v", f)

printfln("hex value of f: %x", f)

// *f represents the value in variable e
println("*f:", *f)

setValue(f, true)

println("*f:", *f)

// value in e is changed after setValue called
println("e:", e)

// for complex types
a = []string{"first", "second", "3rd"} // &[]string{"aa", "bb"} 这种方式在Gox语言（Qlang引擎）中是不允许的
// a = []int{1, 2, 3}

println("a:", a)

// but you can retrieve pointer by this way
pa = ^a

printfln("pa: %T, %v, %#v, %p, %#v", pa, pa, pa, pa, *pa)

va = getValue(pa)

va[1] = "aaa"

printfln("*pa: %#v", *pa)
printfln("a: %#v", a)

np = new(int)

setValue(np, 16)

pl("np: %v, *np: %v", np, *np)

b1 = 0x7A // 01111010

b2 = 0x21 // 00100001

// 01111010 XOR 00100001 = 01011011
printfln("b1 XOR b2 = %b", bitXor(b1, b2))

printfln("b1 XOR b2 = %b", tk.BitXor(b1, b2))